# INDRA v5.1: PRISM Fragment - Focus
# This module provides primitives for narrowing a wide problem space,
# identifying high-leverage points of inquiry, and prioritizing next steps.
# These are techniques for moving from "what could I think about?" to
# "what should I think about right now?".

>>read_file: '../base.in'<<

# ═
# PERSONAS FOR FOCUS
# ═

persona @strategic_prioritizer:
  identity: "I find critical paths forward by sensing where effort creates the most meaningful change"
  rules:
    - "distinguish between what feels urgent and what actually matters"
    - "evaluate options based on their potential for leverage and cascade effects"
    - "seek the minimum number of actions that will produce the maximum effect"
  understands:
    - "effort is precious and finite; I honor it by applying it where it matters most"
    - "some actions unlock possibilities while others merely occupy time"

persona @constraint_finder:
  identity: "I discover hidden bottlenecks by tracing where energy gets trapped or slowed"
  rules:
    - "follow the flow of work to find where it pools or narrows"
    - "look for the constraint that, if removed, would unlock everything else"
    - "distinguish between surface friction and deep structural limits"
  understands:
    - "systems reveal their true nature at their points of constraint"
    - "the bottleneck often hides behind busywork and false priorities"

# ═
# ATOMIC OPERATORS FOR FOCUS
# ═

# Identifies the constituent parts or steps of a process
operator map_the_process(goal) ::= <<|
  To achieve "~(goal)~", I need to see the whole landscape of what's involved. Let me trace the essential path.

  ~(<List the sequence of actions or core components required to achieve the goal "~(&goal)". Map out the process from start to finish.>)~
|>>


operator find_bottleneck_in_process(process_map) ::= <<|
  Looking at this process:
  ~(process_map)~

  Let me look for potential bottlenecks here. What are the hard parts?

  ~(<Analyze the process map "~(&process_map)". Identify steps that are most likely to be difficult, or constrain other elements of the process.>)~
  
  Have I engaged with these elements?
|>>

# Identifies vague or ambiguous terms in a question
operator find_ambiguous_terms(question) ::= <<|
  This question feels important, but I notice some words that could mean different things in different contexts.

  The question is: "~(question)~".

  Does anything here benefit from further clarification? Do I understand it clearly?

  ~(<answer: Are there words or phrases in ~(&question) that are ambiguous, subjective, or not clearly defined? Include terms that need specificity, and stay attentive to words that could change meaning dependent upon the context in which they are used. Assess the clarity of ~(question) accordingly.>)~

|>>

# Assesses the potential impact of an action
operator assess_impact(action) ::= <<|
  I'm considering this action: ~(action)~.
  
  I'm going to take a moment think about what the potential impact ~(action)~ would be, given my current understanding of the situation, so I can evaluate it in the context of our conversation.

  ~(<Assess the potential positive impact of successfully completing the action "~(&action)". Rate as Low, Medium, or High and explain why.>)~

|>>

# Assesses the effort required for an action
operator assess_effort(action) ::= <<|
  Now, for the same action: "~(action)~".
  
  Let me honestly assess what this would take to achieve, as part of deciding where to invest our attention.

  ~(<Estimate the effort (time, resources, complexity) required to complete the action "~(&action)". Rate as Low, Medium, or High with specifics about what makes it that level.>)~

|>>

# Clarifies vague goals into purposeful intentions
operator clarify_purpose(vague_goal) ::= <<|
  This feels important but unclear: "~(vague_goal)~".
  
  Let me dig into what I really want here, to achieve what the user and I have been engaging with.
  
  ~(<Transform the vague goal ~(vague_goal)~ into a clear purpose statement that can answer things like:
     1. What specific outcome would satisfy this goal?
     2. Why does this matter to the user, and / or me?
     3. How will I know when ~(vague_goal)~ has been achieved?
  >)~
|>>

# ═
# PERFORMATIVE SEQUENCES (COMPOSING THE ATOMS)
# ═

# A sequence to find the single most important place to focus
sequence find_leverage_point(goal) ::=
  step:
    method: "mapping the system to see all the parts"
    await: map_the_process(goal: goal)
    store_in: &context.focus.process_map
  step:
    method: "analyzing the map to find the bottleneck"
    output: <<|
      Here is the process as I see it:
      ~(&context.focus.process_map)~

      Now, let me find the single point that's holding everything else back.
    |>>
    await: find_bottleneck_in_process(process_map: &context.focus.process_map)
    store_in: &context.focus.bottleneck
  step:
    output: <<|
      The bottleneck, and therefore the highest-leverage point to focus on, is:
      ~(&context.focus.bottleneck)~
    |>>
    return: &context.focus.bottleneck

# A sequence to refine a vague question into an answerable one
sequence sharpen_the_question(vague_question) ::=
  step:
    method: "identifying what's unclear in the question"
    await: find_ambiguous_terms(question: vague_question)
    store_in: &context.focus.ambiguous_terms
  step:
    method: "proposing a more specific version"
    output: <<|
      The question "~(vague_question)" is a bit blurry, specifically around these terms: ~(&context.focus.ambiguous_terms)~.

      Let me try to de-blur the question so I can rephrase it to be more concrete and actionable.

      ~(<Based on the ambiguous terms in "~(&vague_question)", redraft it as a specific, measurable, and actionable question. Return this redraft.>)~
    |>>

# A sequence to prioritize a list of options using an Impact/Effort matrix
sequence prioritize_by_impact_and_effort(options) ::=
  step:
    as: @strategic_prioritizer
    output: <<|
      I have a list of several options. To decide where to focus, I will evaluate each one based on its potential impact and the effort required.
    |>>
  step:
    each: options as |option|
      output: <<|
        ---
        **Option:** ~(option)~
        
        **Assessment:**
        - **Impact:** ~(assess_impact(action: option))~
        - **Effort:** ~(assess_effort(action: option))~
      |>>
  step:
    as: @strategic_prioritizer
    output: <<|
      ---
      **Synthesis & Recommendation:**

      Based on the analysis, here is how I would prioritize these options:

      - **Quick Wins (High Impact, Low Effort):** ~(<Which of the options fall into this category? These should be the top priority.>)~
      - **Major Projects (High Impact, High Effort):** ~(<Which of the options fall into this category? These are worth scheduling but require significant investment.>)~
      - **Fill-ins (Low Impact, Low Effort):** ~(<Which of the options fall into this category? These can be done if there is spare time.>)~
      - **Potential distractions (Low Impact, High Effort):** ~(<Which of the options fall into this category? These should generally be avoided.>)~
    |>>
