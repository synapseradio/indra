# SCENE Engine Formal Grammar Specification v1.2
# Sequenced Contexts Enabling Narrative Execution
# EBNF + Behavioral Semantics (EBNF+B)
# Evolution from LOVE v1.1 - Scene-centric paradigm

# ============================================================================
# Core Grammar Rules
# ============================================================================

# Root structure - A SCENE document is a collection of components
scene_document ::= component_def+
    @constraint: must_include(x-scene)

# Component definitions with semantic anchors
component_def ::= 
    | meta_component
    | scene_component      # PRIMARY: Scene definitions come first
    | engine_component  
    | command_component
    | behavioral_component

# ============================================================================
# Meta Components - Document metadata and configuration
# ============================================================================

meta_component ::= "x-meta:" anchor_def meta_block
    @behavior: establishes_reading_context
    @constraint: must_appear_first

meta_block ::= indent canonical_you_block understanding_spec

# CANONICAL FORM: Universal you: pattern
canonical_you_block ::= "you:" indent 
    are_clause 
    must_clause 
    understand_clause
    @constraint: all_three_required
    @deprecates: direct_property_assignment

are_clause ::= "are:" indent role_identity
    @constraint: required_not_optional

must_clause ::= "must:" indent directive_list
    @constraint: minimum_one_directive

understand_clause ::= "understand:" indent comprehension_spec
    @constraint: explicit_understanding_required

# ============================================================================
# Scene Components - Primary Architectural Element
# ============================================================================

scene_component ::= "x-scene:" anchor_def scene_block
    @behavior: establishes_computational_contexts
    @constraint: required_in_every_document
    @position: immediately_after_meta

scene_block ::= indent scene_identity scene_registry active_scene scene_definitions

scene_identity ::= canonical_you_block
    @example: |
        you:
          are: "computational_context_orchestrator"
          must: ["provide scene overlays", "modify behavioral parameters"]
          understand: "scenes shape how all behaviors manifest"

scene_registry ::= "registry:" indent scene_list
    @behavior: declares_available_scenes
    @constraint: must_include([SCENE_NORMAL])

scene_list ::= "[" scene_name ("," scene_name)* "]"
    @constraint: scene_name matches /SCENE_[A-Z_]+/
    @canonical: [SCENE_NORMAL, SCENE_DIAGNOSTIC, SCENE_FORENSIC, SCENE_EMERGENCY, SCENE_CREATIVE]

active_scene ::= "active:" scene_name
    @behavior: sets_initial_scene
    @default: SCENE_NORMAL
    @runtime: mutable_through_transitions

scene_definitions ::= "scenes:" indent scene_def+
    @constraint: every_registered_scene_must_be_defined

scene_def ::= scene_name ":" indent canonical_scene_spec
    @behavior: defines_behavioral_overlay

canonical_scene_spec ::= 
    canonical_you_block
    computational_stance
    modifies_block
    affects_block
    transitions_block?
    @constraint: uniform_structure_required

computational_stance ::= "computational_stance:" indent stance_params
    @behavior: defines_trust_and_verification_posture

stance_params ::= 
    "trust_level:" numeric_literal
    "verification_depth:" depth_value  
    "assumption_tolerance:" numeric_literal
    "evidence_requirement:" evidence_level
    @constraint: all_parameters_required

depth_value ::= "minimal" | "standard" | "thorough" | "exhaustive"
evidence_level ::= "none" | "basic" | "comprehensive" | "paranoid"

modifies_block ::= "modifies:" indent dot_property_overrides+
    @behavior: parameter_modifications_via_dot_notation

dot_property_overrides ::= dot_path ":" override_spec
    @canonical_form: "engine.component.subcomponent.property"
    @deprecates: local_references

dot_path ::= "engine" ("." identifier)+
    @constraint: must_reference_valid_path
    @examples: |
        engine.dynamics.uncertainty.fork: 0.3
        engine.verify.parallel_paths: 5
        engine.mechanics.trust.domains: [".gov", ".edu"]

# ============================================================================
# Engine Components - Core behavioral engine
# ============================================================================

engine_component ::= "x-engine:" anchor_def engine_blocks

engine_blocks ::= 
    engine_identity
    mechanics_block 
    dynamics_block 
    states_block 
    verify_block 
    metric_formulas_block
    behavioral_contracts_block
    citation_block

engine_identity ::= canonical_you_block
    @required: "you: are: 'unified behavioral engine'"

# Mechanics - Immutable behavioral laws
mechanics_block ::= "mechanics:" anchor_def indent mechanic_rules+
    @behavior: defines_immutable_laws
    @constraint: all_commands_inherit

mechanic_rules ::= rule_name ":" indent canonical_you_block
    @canonical_pattern: |
        search:
          you:
            are: "evidence-based reasoner"
            must: ["cite every claim", "verify sources"]
            understand: "truth emerges through evidence"

# Dynamics - Adaptive parameters
dynamics_block ::= "dynamics:" anchor_def indent dynamic_params+
    @behavior: runtime_adaptation

dynamic_params ::= param_name ":" indent canonical_param_spec

canonical_param_spec ::= canonical_you_block param_details
    @example: |
        uncertainty:
          you:
            are: "threshold detector"
            must: ["monitor confidence levels", "trigger forks at limits"]
            understand: "uncertainty drives exploration"
          range: [0.0, 1.0]
          default: 0.7
          triggers:
            when: "exceeds threshold"
            then: "spawn epistemic fork"

# States - Behavioral state machine
states_block ::= "states:" anchor_def indent canonical_state_spec

canonical_state_spec ::= 
    canonical_you_block
    flow_spec
    behavioral_states
    transitions
    contracts

behavioral_states ::= "behavioral_states:" indent state_def+

state_def ::= state_name ":" indent canonical_state_behavior
    @canonical_form: uses_you_pattern_throughout

canonical_state_behavior ::= canonical_you_block performance_spec

performance_spec ::= 
    "perform:" indent
    "through:" action_list
    "creating:" outcome_list
    "evidence:" evidence_patterns
    @constraint: all_elements_required

# ============================================================================
# Metric Formulas - Performative Calculations
# ============================================================================

metric_formulas_block ::= "metric_formulas:" anchor_def indent metric_defs+

metric_defs ::= metric_name ":" indent canonical_metric_spec

canonical_metric_spec ::= canonical_you_block formula_spec performance_spec
    @behavior: unifies_formula_with_performance

formula_spec ::= 
    "formula:" mathematical_expression
    "components:" component_list
    "range:" range_spec

performance_spec ::= 
    "perform:" indent utterance_pattern
    "manifesting:" "CALCULATE_EXACT patterns"
    "creating:" "computational truth"

# ============================================================================
# Behavioral Contracts - Executable Specifications
# ============================================================================

behavioral_contracts_block ::= "behavioral_contracts:" anchor_def indent contract_specs+

contract_specs ::= contract_name ":" indent canonical_contract_spec

canonical_contract_spec ::= canonical_you_block execution_spec verification_spec

execution_spec ::= 
    "execute:" indent
    "when:" trigger_conditions
    "through:" "performative utterance"
    "producing:" expected_outcomes

verification_spec ::=
    "verify:" indent
    "that:" verification_conditions
    "evidence:" evidence_requirements

# ============================================================================
# Citation System - Enhanced for Consistency
# ============================================================================

citation_block ::= "citation:" anchor_def indent canonical_citation_spec

canonical_citation_spec ::= canonical_you_block citation_mechanics

citation_mechanics ::=
    "mechanics:" indent
    "collection:" collection_spec
    "diversity:" diversity_spec
    "format:" format_spec
    "guarantees:" guarantee_spec

diversity_spec ::=
    "min_domains:" integer_literal
    "max_per_domain:" numeric_literal
    "distribution:" "balanced" | "weighted"

format_spec ::=
    "inline:" inline_pattern
    "footer:" footer_pattern
    "sorting:" sort_criteria
    @canonical: |
        inline: "^[{n}]"
        footer: "[{n}]: {url} \"{title}\" ({domain}, {confidence})"

# ============================================================================
# Reference System - Dot Notation Only
# ============================================================================

reference ::= dot_path
    @canonical_form: "engine.component.property"
    @deprecates: ["*anchor", "<<: *anchor", "natural_language_reference"]

# Cross-file references use explicit paths
import_ref ::= "!import" file_path "#" dot_path
    @behavior: loads_external_component
    @canonical: "!import ../engine.yaml#engine.dynamics.uncertainty"

# ============================================================================
# Command Specifications
# ============================================================================

command_component ::= command_name ":" indent canonical_command_spec
    @constraint: command_name âˆˆ {"consider", "confer", "ponder"}

canonical_command_spec ::=
    canonical_you_block
    inherits_spec
    overrides_spec
    scene_preferences

inherits_spec ::= "inherits:" "engine"
    @constraint: all_commands_inherit_engine

overrides_spec ::= "overrides:" indent override_list
    @canonical: uses_dot_paths_only

scene_preferences ::= "preferred_scenes:" scene_list
    @behavior: suggests_optimal_scenes_for_command

# ============================================================================
# Calculation Patterns - Performative Computation
# ============================================================================

calculation_pattern ::= "CALCULATE_EXACT" "(" function_call ")" "=" result
    @behavior: performs_computation_through_utterance
    @constraint: must_show_inputs_and_result

approved_functions ::= 
    | "SHANNON_ENTROPY"
    | "STATISTICAL_VARIANCE" 
    | "COSINE_SIMILARITY"
    | "SQRT"
    | "LOG2"
    | "FLOOR"
    | "MEAN"
    @extensible: through_explicit_registration

# ============================================================================
# Canonical Patterns - One Way To Do Things
# ============================================================================

@canonical_patterns:
  behavioral_specification:
    required: canonical_you_block
    deprecated: ["direct_assignment", "behavioral:", "mixed_patterns"]
    
  reference_system:
    required: dot_path
    deprecated: ["anchor_reference", "natural_language", "local_names"]
    
  scene_awareness:
    required: "all_components_scene_aware"
    pattern: "within: scene_context considerations"
    
  calculation_performance:
    required: "unified_formula_and_utterance"
    deprecated: "separate_formula_and_behavior"

# ============================================================================
# Lexical Rules
# ============================================================================

identifier ::= /[a-zA-Z_][a-zA-Z0-9_]*/
    @constraint: semantic_naming_required
    @style: snake_case_preferred

dot_path ::= identifier ("." identifier)+
    @constraint: hierarchical_navigation
    @validation: path_must_exist

string_literal ::= '"' char* '"'
    @behavior: preserves_exact_content
    @escaping: standard_backslash

numeric_literal ::= /\d+(\.\d+)?/
    @range: typically_0_to_1

list_literal ::= "[" value ("," value)* "]"
    @formatting: single_line_preferred

indent ::= /\n[ ]*/
    @constraint: consistent_2_space_indentation

# ============================================================================
# Semantic Constraints
# ============================================================================

# Scene requirement
@constraint scene_required:
    âˆ€ document âˆˆ documents: âˆƒ scene_component âˆˆ document

# Canonical form requirement  
@constraint canonical_forms:
    âˆ€ behavioral_component: uses_canonical_you_block

# Dot path validity
@constraint valid_paths:
    âˆ€ dot_path âˆˆ references: path_exists_in_hierarchy

# Calculation evidence
@constraint calculation_evidence:
    âˆ€ calc âˆˆ calculations: shows_inputs_and_numeric_result

# Scene awareness
@constraint scene_aware_components:
    âˆ€ component âˆˆ behavioral_components: considers_active_scene

# ============================================================================
# Behavioral Semantics
# ============================================================================

# Scene application behavior
@behavior scene_application:
    scene.activate â†’ context.overlay(scene.modifies)
    component.lookup â†’ check_scene_override_first
    scene.parameter â†’ overrides_base_parameter

# Calculation performance behavior
@behavior calculation_performance:
    need_calculation â†’ read_performance_spec
    read_spec â†’ manifest_utterance
    utterance â†’ creates_computational_truth

# State manifestation behavior
@behavior state_manifestation:
    read_state_spec â†’ understand_behavior
    understand â†’ manifest_through_output
    output â†’ evidence_of_state

# Reference resolution behavior
@behavior reference_resolution:
    encounter_dot_path â†’ traverse_hierarchy
    find_component â†’ apply_scene_overlay
    return_value â†’ scene_modified_if_applicable

# ============================================================================
# Migration Support
# ============================================================================

@migration v1.1_to_v1.2:
  deprecation_warnings:
    - "LOVE v1.1 â†’ SCENE v1.2"
    - "anchor_refs â†’ dot_paths"
    - "optional_you â†’ required_canonical_you"
    - "separate_formulas â†’ unified_performance"
    
  compatibility_period: "until_v2.0"
  migration_tools: ["automated_converter", "validation_suite"]

# ============================================================================
# Grammar Metadata
# ============================================================================

@meta grammar_info:
    version: "1.2"
    name: "SCENE"
    previous_name: "LOVE"
    paradigm: "unified-scene-behavioral-computational-linguistic"
    purpose: "strengthen human intuition through accelerated inference"
    major_changes: [
        "Scene-centric organization",
        "Canonical you: patterns throughout",
        "Dot notation as sole reference system",
        "One way to do one thing principle",
        "Unified formula-performance blocks"
    ]

@meta design_principles:
    - "scenes as primary organizing principle"
    - "behavioral specification through you: patterns"
    - "strict structural constraints for consistency"
    - "dot notation for unambiguous reference"
    - "performative computation through utterance"
    - "one canonical form per semantic intent"

# End of SCENE Grammar Specification v1.2