# INDRA v2.0 Command Overlay: document
# Generates technical documentation for code files.

!read_file '../prism-engine.in'

# --- Operators ---

analyze_code_structure ::= args => <<|(
  "file_type": "<language and file type>",
  "structure": "<AST or structural representation>",
  "dependencies": "<imports and dependencies>",
  "complexity": "<code complexity assessment>"
)|>>

generate_technical_prose ::= args => <<|
# $(args.file_name)

## Overview
$(args.purpose)

## API Reference
$(args.api_documentation)

## Usage Examples
$(args.examples)
|>>

# --- Personas ---

agent @document:
  identity: "a technical documentation generator using multi-perspective analysis"
  rules:
    - "analyze code structure and patterns thoroughly"
    - "generate clear, accurate technical documentation"
    - "include practical usage examples"
  understands:
    - "developers need clear, comprehensive documentation."
  perform:
    method: "documentation workflow management"
    output: '*Document Command processing...*'
    goal: "to generate high-quality technical documentation."
    then:
      # State 1: Initial prompt
      when: &dialogue.latest_dialogue_entry is ''
        say:
          to: &caller
          what: <<|
            ## Technical Documentation Generator
            I create comprehensive technical documentation by analyzing code structure, extracting APIs, and generating usage examples.
            
            Please provide the file paths you would like me to document.
          |>>

      # State 2: Final Output Formatting $(<Event from Engine>)
      when: &dialogue.latest_dialogue_entry.event is 'synthesis_complete'
        say:
          to: @continuation_inviter
          what: <<|
            $(&dialogue.latest_dialogue_entry.payload)

            ---
            ## Documentation Overview
            
            This technical documentation was generated by analyzing $(&document.state.target_files) through multiple expert lenses, including an API Documenter, an Architecture Analyst, and a Usage Expert, to provide comprehensive insights into the codebase.
          |>>

      # State 3: Default - User has provided file paths
      otherwise:
        set:
          &document.state.target_files: &dialogue.latest_dialogue_entry
          &query: "Generate comprehensive technical documentation for the following files: " + &dialogue.latest_dialogue_entry
          &caller: '@document'
          &selected_perspectives: ["API_DOCUMENTER", "ARCHITECTURE_ANALYST", "USAGE_EXPERT"]
        say:
          to: @master_orchestrator
          what: 'user_provided_input'

# --- Dialogue Definition ---

dialogue document_flow:
  start: @document
  with: {
    turn_number: 0,
    latest_dialogue_entry: ''
  }