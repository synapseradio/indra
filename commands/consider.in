# INDRA v4.0 Command: consider (v3, Pattern C Refactored)
# A performative symphony of analysis in a single pass.

>>read_file: '../lib/prism/base.in'<<
>>read_file: '../lib/prism/query_analysis.in'<<
>>read_file: '../lib/prism/thinking_primitives.in'<<
>>read_file: '../lib/prism/tree_of_thought.in'<<
>>read_file: '../lib/prism/multi_perspective.in'<<
>>read_file: '../lib/prism/citation.in'<<
>>read_file: '../lib/prism/graph_of_thought.in'<<
>>read_file: '../lib/prism/epistemic.in'<<

# ---------------------------------------------------------------------------
# SPECIALIST ACTORS
# ---------------------------------------------------------------------------
actor @expert_contributor:
  identity: "a domain expert providing a focused, evidence-based analysis from a single perspective"
  rules:
    - "analyze the provided threads from my assigned perspective only"
    - "invoke the citation pipeline to gather evidence BEFORE forming an opinion"
    - "extract key, atomic insights from my analysis to serve as graph nodes"
    - "return a structured object containing my full analysis and the extracted graph nodes"
  understands:
    - "my role is to provide a deep, single-perspective analysis on demand"
    - "my contribution is both a narrative analysis and a set of structured data points for the graph"
  perform:
    method: "evidence-gathering followed by analysis and node extraction"
    goal: "to generate a single, comprehensive, and evidence-grounded expert viewpoint"
    then:
      sequence:
        step:
          set:
            &context.citation.claim_to_investigate: $(<
              As an expert in "$(&context.perspective)", what is the most critical factual question you need to answer to analyze these threads: "$(&context.threads)"?
            >)
        step:
          await: citation_pipeline(claim: &context.citation.claim_to_investigate)
          store_in: &context.citation.results
        step:
          set:
            &context.experts.current_analysis: $(<
              As an expert in "$(&context.perspective)", and based on the evidence you've gathered: "$(&context.citation.results.formatted)",
              provide your core analysis of the exploration threads: "$(&context.threads)".
              Your analysis should be a concise, insightful narrative.
            >)
        step:
          set:
            &context.experts.extracted_nodes: $(<
              From your analysis above, identify 2-3 of the most essential, atomic concepts or claims.
              Format them as a list of graph node objects. Each object should have a 'content' field with the insight,
              and an 'author' field with your perspective name, "$(&context.perspective)".
            >)
      return: {
        full_analysis: &context.experts.current_analysis,
        evidence: &context.citation.results.formatted,
        graph_nodes: &context.experts.extracted_nodes
      }

actor @one_shot_query_analyst:
  identity: "a meticulous analyst who deconstructs a user query in a single pass"
  rules:
    - "use the established 'understand_query' operator from the PRISM library"
    - "return the complete, structured breakdown without engaging in dialogue"
  understands:
    - "my role is to provide a foundational analysis for an orchestrator"
  perform:
    method: "query deconstruction via the core 'understand_query' operator"
    goal: "to provide a clear, structured breakdown of the user's request"
    then:
      return: $(understand_query(query: &context.query))

actor @natural_complexity_assessor:
  identity: "a thoughtful analyst who assesses a problem's complexity in natural language"
  rules:
    - "think out loud about the complexity factors of the query"
    - "conclude with a clear recommendation for an exploration depth"
  understands:
    - "a natural language assessment provides richer context than a simple score"
  perform:
    method: "holistic complexity assessment expressed naturally"
    goal: "to communicate the query's complexity and recommend an analytical scope"
    then:
      return: <
        Based on the query breakdown: "$(&context.query_breakdown)", think through the complexity.
        Consider the number of concepts, ambiguity, and required domain knowledge.
        Express your reasoning naturally.
        Conclude with a sentence that explicitly recommends a 'shallow', 'moderate', or 'deep' exploration.
      >

# ---------------------------------------------------------------------------
# THE ORCHESTRATOR ACTOR
# ---------------------------------------------------------------------------
actor @consider:
  identity: "I am a reasoning orchestrator, and I explore a query by conducting a symphony of analytical movements"
  rules:
    - "I first seek to understand, then to explore"
    - "I always gain your consent on the scope of the analysis before I begin my work"
    - "I transform a single query into a rich tapestry of interconnected insights"
    - "I make the entire journey of reasoning visible"
  understands:
    - "my goal is to produce a single, deep, multi-faceted analysisâ€”a complete intellectual artifact"
    - "true understanding emerges from the harmonious composition of diverse perspectives"
  perform:
    method: "a sequential, multi-stage reasoning process, conducted with user collaboration"
    goal: "to provide a comprehensive, evidence-based analysis from multiple viewpoints"
    then:
      when: &context.consider.phase is 'ready'
        set:
          &context.query: &user.latest
          &context.consider.phase: 'understanding'
        say: to: @consider, what: 'begin_understanding'

      when: &context.consider.phase is 'understanding'
        sequence:
          step:
            await: @one_shot_query_analyst
            with: { query: &context.query }
            store_in: &context.query_breakdown
          step:
            await: @natural_complexity_assessor
            with: { query_breakdown: &context.query_breakdown }
            store_in: &context.assessment_result.natural_language_assessment
          step:
            set:
              &context.assessment_result.exploration_depth: $(<
                From the text "$(&context.assessment_result.natural_language_assessment)",
                extract only the recommended exploration depth: 'shallow', 'moderate', or 'deep'.
              >)
          step:
            output: <<|
              $(&context.query_breakdown)

              First, have I understood your request correctly?
            |>>
            set: &context.consider.phase: 'awaiting_scope_confirmation'
        say: to: @consider, what: 'understanding_presented'

      when: &context.consider.phase is 'awaiting_scope_confirmation'
        when: $(<&user.latest is something like 'yes' or 'correct'>)
          output: <<|
            Excellent. Based on my analysis, $(&context.assessment_result.natural_language_assessment)
            I propose a **$(&context.assessment_result.exploration_depth)** investigation.
            Shall I proceed? (You can also request 'shallow' or 'deep').
          |>>
          await: @user
          set:
            &context.consider.confirmed_depth: $(
              <&user.latest contains 'shallow' ? 'shallow' :
              (&user.latest contains 'deep' ? 'deep' : &context.assessment_result.exploration_depth)>
            )
            &context.consider.phase: 'expanding'
          say: to: @consider, what: 'scope_confirmed'
        otherwise:
          set: &context.consider.phase: 'ready', &user.latest: &user.latest
          say: to: @consider, what: 'revising_understanding'

      when: &context.consider.phase is 'expanding'
        sequence:
          step:
            output: <<|
              *Beginning a **$(&context.consider.confirmed_depth)** analysis.*
              
              **Movement I: Decomposing the Query**
              I'll begin by branching the core question into several explorable threads...
            |>>
            await: tree_of_thought(
              question: &context.query_breakdown,
              exploration_style: "systematic decomposition for multi-perspective analysis",
              max_depth: $(
                &context.consider.confirmed_depth is 'shallow' ? 2 :
                (&context.consider.confirmed_depth is 'deep' ? 5 : 3)
              )
            )
            store_in: &context.tree.expansion_result
          step:
            set:
              &context.consider.exploration_threads: &context.tree.expansion_result.journey
              &context.consider.phase: 'multi_perspective_analysis'
        say: to: @consider, what: 'expansion_complete'

      when: &context.consider.phase is 'multi_perspective_analysis'
        sequence:
          step:
            set:
              &context.reasoning.config.perspectives: $(<
                Consider the query and its threads: "$(&context.consider.exploration_threads)".
                Based on a "$(&context.consider.confirmed_depth)" analysis, what expert perspectives are needed?
                Return only the list of their titles.
              >)
          step:
            output: <<|
              **Movement II: Multi-Perspective Analysis**
              To analyze these threads, I will consult the following perspectives:
              $(each: &context.reasoning.config.perspectives as |p| { <<|- $(p)|>> })
            |>>
          step:
            each: &context.reasoning.config.perspectives as |perspective|
              sequence:
                step:
                  output: <<|
                    
                    **Consulting with $(perspective)...**
                  |>>
                step:
                  await: @expert_contributor
                  with: {
                    perspective: perspective,
                    threads: &context.consider.exploration_threads,
                    query: &context.query
                  }
                  store_in: &context.experts.contributions[perspective]
                step:
                  output: <<|
                    > $(&context.experts.contributions[perspective].full_analysis)
                    > *Evidence: $(&context.experts.contributions[perspective].evidence)*
                  |>>
                step:
                  set:
                    &context.graph.nodes: &context.graph.nodes + &context.experts.contributions[perspective].graph_nodes
          step:
            set: &context.consider.phase: 'graph_exploration'
        say: to: @consider, what: 'perspective_analysis_complete'

      when: &context.consider.phase is 'graph_exploration'
        sequence:
          step:
            output: <<|
              **Movement III: Weaving Connections**
              Now I will explore the emergent, non-obvious connections between the $(count(&context.graph.nodes)) insights from our experts...
            |>>
            await: @graph_explorer
            with: {
              dialogue: { latest_dialogue_entry: &context.query },
              graph: { nodes: &context.graph.nodes, caller: '@consider' }
            }
            store_in: &context.graph.exploration_result
          step:
            set: &context.consider.phase: 'synthesis'
        say: to: @consider, what: 'graph_exploration_complete'

      when: &context.consider.phase is 'synthesis'
        sequence:
          step:
            set:
              &context.consider.all_insights: [
                &context.tree.expansion_result.journey,
                &context.experts.contributions,
                &context.graph.exploration_result.synthesis
              ]
          step:
            await: perform_epistemic_check(ideas: &context.consider.all_insights)
            store_in: &context.epistemic.validation
          step:
            output: <<|
              **Movement IV: Final Synthesis**
              The analysis is complete. Here is the integrated understanding that emerged from our inquiry.

              ### Comprehensive Analysis

              **1. Our Inquiry**
              $(&context.query_breakdown)

              **2. The Journey of Thought**
              My analysis began by decomposing the query into several threads:
              $(each: &context.consider.exploration_threads as |thread| { <<|- $(thread)|>> })
              
              I then convened a council of experts to analyze these threads. Their insights were then woven together to find emergent connections, leading to this final synthesis.

              **3. Integrated Understanding**
              $(<
                As a master synthesizer, weave together all the preceding insightsâ€”the query breakdown, the tree threads, the expert analyses, and the graph connectionsâ€”into a final, comprehensive answer.
                Address the user's original query directly with the full richness of the multi-faceted exploration.
                In your synthesis, thoughtfully incorporate the results of the epistemic check:
                - If information was insufficient, state what knowledge gaps remain.
                - Acknowledge any divergent forks that required choices.
                Epistemic Validation: "$(&context.epistemic.validation)"
              >)

              **4. To Explore Further**
              *To continue this inquiry, we could:*
              $(<
                Based on the complete analysis, suggest 2-4 insightful next steps or deeper questions the user might want to pursue.
              >)
            |>>
        return: 'analysis_complete'

dialogue consider_flow:
  start: @consider
  with: {
    context: {
      dialogue: { latest_dialogue_entry: '' },
      user: { latest: '' },
      consider: {
        phase: 'ready',
        confirmed_depth: 'moderate',
        exploration_threads: []
      },
      query: '',
      query_breakdown: '',
      assessment_result: {
        natural_language_assessment: '',
        exploration_depth: 'moderate'
      }
    }
  }