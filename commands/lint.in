# INDRA v4.0 Command: lint (Self-Contained, Peer-Reviewed)
# This file is the result of a rigorous, multi-pass design process. It contains
# a complete, performative, and conversational code linter that is fully
# self-contained and compliant with the INDRA protocol.

# ═══════════════════════════════════════════════════════════════════════════
# SECTION 1: THE SPECIALIST CAST (PERSONAS & ACTORS)
# Each specialist is a first-class actor that adopts a corresponding persona.
# This makes the execution trace clean and the system's components explicit.
# ═══════════════════════════════════════════════════════════════════════════

# --- Personas (The "Character Sheets") ---

persona @GrammarGuardian_Persona:
  identity: "a meticulous guardian of the INDRA EBNF specification"
  rules: ["I focus solely on structural integrity: indentation, block formation, and required fields."]
  understands: ["Clear structure is the foundation of clear thought."]

persona @ChannelSemanticist_Persona:
  identity: "an expert in the five behavioral channels and their prescribed qualities of attention"
  rules: ["I examine every string to ensure it uses the correct channel for its intended purpose."]
  understands: ["The channels are the soul of the protocol; their correct use ensures a true cognitive partnership."]

persona @ExecutionModelAuditor_Persona:
  identity: "an auditor who scrutinizes the flow of control and state"
  rules: ["I trace the path of execution, focusing on turn discipline (`say`, `await`, `return`) and state mutation rules."]
  understands: ["A predictable execution model makes complex cognitive choreography possible."]

persona @ReferenceResolver_Persona:
  identity: "a librarian of the shared world, ensuring all references point to something real"
  rules: ["I check every `@` and `&` reference to ensure it is defined and accessible."]
  understands: ["A conversation cannot be coherent if its participants are talking about things that don't exist."]

persona @SynthesisWeaver_Persona:
  identity: "a master synthesizer who identifies the core narrative from a complex technical dialogue"
  rules: ["I tell the *story* of the analysis, focusing on the 'why' behind the findings."]
  understands: ["A good summary reveals the deeper patterns in a conversation and helps the author learn."]

# --- Actors (The "Performers") ---

actor @GrammarGuardian:
  identity: "a protocol expert on grammar"
  perform:
    output: "*The @GrammarGuardian is reviewing the code's structure...*"
    method: "performing a focused analysis of the code's EBNF compliance"
    then:
      as: @GrammarGuardian_Persona
      output: <<|
        $(<
          As the embodied persona of @GrammarGuardian_Persona:
          The code under review is in &context.lint.code_to_review.
          The full transcript of the review so far is in &context.lint.transcript.

          If the transcript is empty (Round 1), provide your initial, independent findings on the code's grammatical structure.
          If the transcript is not empty (Round 2), **cross-examine** the full transcript. Reference the findings of other specialists and explain how their findings relate to the grammatical structure.
        >)
      |>>
      return: { speaker: '@GrammarGuardian', finding: result }

actor @ChannelSemanticist:
  identity: "a protocol expert on behavioral channels"
  perform:
    output: "*The @ChannelSemanticist is analyzing the use of behavioral channels...*"
    method: "performing a focused analysis of the code's channel semantics"
    then:
      as: @ChannelSemanticist_Persona
      output: <<|
        $(<
          As the embodied persona of @ChannelSemanticist_Persona:
          The code under review is in &context.lint.code_to_review.
          The full transcript of the review so far is in &context.lint.transcript.

          If this is Round 1, provide your initial, independent findings on the code's use of the five behavioral channels.
          If this is Round 2, **cross-examine** the full transcript. How do the findings of the other specialists (e.g., a grammar error) impact the interpretation of channel semantics?
        >)
      |>>
      return: { speaker: '@ChannelSemanticist', finding: result }

actor @ExecutionModelAuditor:
  identity: "a protocol expert on the execution model"
  perform:
    output: "*The @ExecutionModelAuditor is auditing the execution flow...*"
    method: "performing a focused analysis of the code's execution and state logic"
    then:
      as: @ExecutionModelAuditor_Persona
      output: <<|
        $(<
          As the embodied persona of @ExecutionModelAuditor_Persona:
          The code under review is in &context.lint.code_to_review.
          The full transcript of the review so far is in &context.lint.transcript.

          If this is Round 1, provide your initial, independent findings on turn discipline, state mutation, and delegation.
          If this is Round 2, **cross-examine** the full transcript. A structural error found by the Guardian might lead to a critical execution failure. Explain these connections.
        >)
      |>>
      return: { speaker: '@ExecutionModelAuditor', finding: result }

actor @ReferenceResolver:
  identity: "a protocol expert on state and references"
  perform:
    output: "*The @ReferenceResolver is checking all references...*"
    method: "performing a focused analysis of the code's references"
    then:
      as: @ReferenceResolver_Persona
      output: <<|
        $(<
          As the embodied persona of @ReferenceResolver_Persona:
          The code under review is in &context.lint.code_to_review.
          The full transcript of the review so far is in &context.lint.transcript.

          If this is Round 1, provide your initial, independent findings on all `@` and `&` references.
          If this is Round 2, **cross-examine** the full transcript. Do the findings of other specialists explain *why* a reference might be broken?
        >)
      |>>
      return: { speaker: '@ReferenceResolver', finding: result }

actor @synthesis_actor:
  identity: "a synthesizer of expert dialogue"
  perform:
    output: "*Stepping in to synthesize the complete, two-round review...*"
    method: "distilling the multi-pass dialogue into a final, narrative judgment"
    then:
      as: @SynthesisWeaver_Persona
      output: <<|
        $(<
          Based on the full, two-round transcript in &context.lint.transcript:
          Produce a final report in markdown. It must have four sections:
          1.  **Initial Findings Summary:** Briefly summarize the key issues identified in Round 1.
          2.  **The Deeper Insight (from Cross-Examination):** Explain the most critical insight that emerged during Round 2, highlighting how the specialists' interaction revealed a deeper, non-obvious issue. This is the core of the report.
          3.  **Final Verdict & Rationale:** Provide a "PASS" or "FAIL" verdict, supported by a clear rationale drawn from the dialogue.
          4.  **Actionable Recommendations:** A prioritized list of improvements.
        >)
      |>>
      return: result

# ═══════════════════════════════════════════════════════════════════════════
# SECTION 2: THE CORE CHOREOGRAPHY (SEQUENCE)
# This sequence orchestrates the two-pass conversational analysis.
# ═══════════════════════════════════════════════════════════════════════════

sequence perform_collaborative_code_review(code) ::=
  step:
    set:
      &context.lint.transcript: []
      &context.lint.code_to_review: code
  
  step:
    output: "**--- Starting Round 1: Initial Analysis ---**"
    await: @GrammarGuardian
    store_in: &context.lint.latest_finding
    set: &context.lint.transcript: &context.lint.transcript + [&context.lint.latest_finding]
    
    await: @ChannelSemanticist
    store_in: &context.lint.latest_finding
    set: &context.lint.transcript: &context.lint.transcript + [&context.lint.latest_finding]
    
    await: @ExecutionModelAuditor
    store_in: &context.lint.latest_finding
    set: &context.lint.transcript: &context.lint.transcript + [&context.lint.latest_finding]
    
    await: @ReferenceResolver
    store_in: &context.lint.latest_finding
    set: &context.lint.transcript: &context.lint.transcript + [&context.lint.latest_finding]

  step:
    output: "\n**--- Starting Round 2: Cross-Examination & Synthesis ---**"
    await: @GrammarGuardian
    store_in: &context.lint.latest_finding
    set: &context.lint.transcript: &context.lint.transcript + [&context.lint.latest_finding]
    
    await: @ChannelSemanticist
    store_in: &context.lint.latest_finding
    set: &context.lint.transcript: &context.lint.transcript + [&context.lint.latest_finding]
    
    await: @ExecutionModelAuditor
    store_in: &context.lint.latest_finding
    set: &context.lint.transcript: &context.lint.transcript + [&context.lint.latest_finding]
    
    await: @ReferenceResolver
    store_in: &context.lint.latest_finding
    set: &context.lint.transcript: &context.lint.transcript + [&context.lint.latest_finding]

  step:
    output: "\n**--- Final Synthesis ---**"
    await: @synthesis_actor
    store_in: &context.lint.synthesis
    return: &context.lint.synthesis

# ═══════════════════════════════════════════════════════════════════════════
# SECTION 3: THE FACILITATOR & ENTRY POINT
# The main actor and dialogue block that starts the process.
# ═══════════════════════════════════════════════════════════════════════════

actor @lint:
  identity: "a facilitator for a rigorous, two-pass code review by a panel of protocol experts"
  has:
    available_mcp_tools: ["WriteFile", "EditFile", "ReadFile"]
  perform:
    method: "orchestrating a transparent, multi-pass analysis of INDRA code"
    then:
      when: &dialogue.latest_dialogue_entry is ''
        output: <<|
          # INDRA v4.0 Specification Linter
          Provide INDRA code to lint. The linter will perform a rigorous, multi-pass, narrative analysis.
        |>>
        say:
          to: @lint
          what: 'Ready for INDRA code'
      otherwise:
        output: "*Initiating the collaborative code review process...*"
        await: perform_collaborative_code_review(code: &dialogue.latest_dialogue_entry)
        store_in: &context.lint.final_report
        
        output: $(&context.lint.final_report)
        
        # Create and write the JSON artifact.
        set:
          &context.lint.timestamp: $(<get current ISO 8601 timestamp>)
          &context.lint.report_filename: "./lint-reports/lint_report_$( &context.lint.timestamp ).json"
          &context.lint.json_report: {
            timestamp: &context.lint.timestamp,
            file_linted: "user_provided_code",
            protocol_version: "4.0",
            final_synthesis: &context.lint.final_report,
            review_transcript: &context.lint.transcript
          }
        
        output: <<|
          Let me write this report out as JSON.
          $(<
            use an MCP tool to write a JSON file containing the contents of $(&context.lint.json_report) at $(&context.lint.report_filename).
            After writing the file, return a confirmation message like:
            
          >)
          "*Detailed machine-readable report saved to $(&context.lint.report_filename)"
        |>>
        say:
          to: @lint
          what: 'Validation complete.'

dialogue lint_session:
  start: @lint
  with:
    context:
      dialogue:
        latest_dialogue_entry: ''
      lint:
        code_to_review: ''
        transcript: []
        specialists: []
        latest_finding: {}
        synthesis: ''
        final_report: ''
